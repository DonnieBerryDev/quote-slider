{"ast":null,"code":"var _jsxFileName = \"/Users/donnieberry/Documents/Web Development/Quote Slider/tmd_media_quote_slider/src/components/userInput/Postcode.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Postcode extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.advanceUser = () => {\n      // if (this.state.postcodeResult && this.state.error == null) {\n      //   this.props.setInputStage(\"2\")\n      // } else {\n      //   this.setState({\n      //     error: \"Please enter a valid postcode\",\n      //   })\n      // }\n      if (this.state.postcodeResult && this.state.error == null) {\n        this.setState({\n          leaving: true\n        });\n        let delay = setInterval(() => {\n          this.setState({\n            leaving: false\n          });\n          this.props.setInputStage(\"1\");\n          clearInterval(delay);\n        }, 500);\n      } else {\n        this.setState({\n          error: \"Please enter a valid postcode\"\n        });\n      }\n    };\n\n    this.setPostcode = input => {\n      this.setState({\n        postcode: input\n      });\n      this.props.setPostcode(input);\n      this.CheckPostcode(input);\n    };\n\n    this.handleBack = () => {\n      this.props.setInputStage(\"0\");\n    };\n\n    this.CheckPostcode = input => {\n      console.log(input);\n\n      if (input == null) {\n        this.setState({\n          error: \"Enter something!\"\n        });\n      } else {\n        axios.get(\"http://api.postcodes.io/postcodes/\" + input + \"/validate\").then(postcodeValid => {\n          this.setState({\n            postcodeResult: postcodeValid.data.result\n          });\n\n          if (!this.state.postcodeResult && input.length >= 5) {\n            this.setState({\n              error: \"You have entered an invalid postcode\"\n            });\n          } else {\n            this.setState({\n              error: null\n            });\n          }\n\n          axios.get(\"http://api.postcodes.io/postcodes/\" + input).then(postcode => {\n            this.setState({\n              longitude: postcode.data.result.longitude,\n              latitude: postcode.data.result.latitude\n            }); // POSTCODE DISTANCE CALCULATOR, DO NOT TOUCH OR I WON'T BE HAPPY :)\n\n            function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n              var R = 6371; // Radius of the earth in km\n\n              var dLat = deg2rad(lat2 - lat1); // deg2rad below\n\n              var dLon = deg2rad(lon2 - lon1);\n              var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n              var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n              var d = R * c; // Distance in km\n\n              var miles = d * 0.621371; // Distance in miles\n\n              var roundedMiles = miles.toFixed(2);\n              return roundedMiles;\n            }\n\n            function deg2rad(deg) {\n              return deg * (Math.PI / 180);\n            }\n\n            this.setState({\n              distance: getDistanceFromLatLonInKm(this.state.homeLatitude, this.state.homeLongitude, this.state.latitude, this.state.longitude)\n            });\n\n            if (this.state.postcodeResult) {\n              // this.props.setInputStage(\"2\")\n              if (this.state.distance < 10) {\n                this.setState({\n                  error: null\n                });\n              } else {\n                this.setState({\n                  error: \"You have entered a postcode that is more than 10 miles away, we cannot service you. That postcode is \" + this.state.distance + \" miles away.\"\n                });\n              }\n            } else {}\n          });\n        });\n      }\n    };\n\n    this.state = {\n      postcode: \"\",\n      longitude: null,\n      latitude: null,\n      homeLongitude: -4.175721,\n      homeLatitude: 55.828962,\n      distance: \"\",\n      postcodeResult: null,\n      inputStage: \"2\",\n      leaving: false,\n      entering: false,\n      error: null\n    };\n  }\n\n  render() {\n    function renderPostcode() {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"advance_button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn_advance\",\n          onClick: () => this.advanceUser(),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"back_button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn_back\",\n          onClick: () => this.handleBack(),\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.state.leaving ? \"leaving-anim input\" : \"input entering-anim\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"form_header\",\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Enter Your Postcode\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: this.state.postcodeResult && !this.state.error ? \"highlight-green allCaps\" : this.state.error ? \"highlight-red allCaps\" : this.state.error == null ? \"allCaps\" : null,\n            type: \"text\",\n            value: this.state.postcode,\n            onChange: e => {\n              this.setPostcode(e.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"error_msg\",\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: this.state.error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Postcode;","map":{"version":3,"sources":["/Users/donnieberry/Documents/Web Development/Quote Slider/tmd_media_quote_slider/src/components/userInput/Postcode.js"],"names":["React","axios","Postcode","Component","constructor","props","advanceUser","state","postcodeResult","error","setState","leaving","delay","setInterval","setInputStage","clearInterval","setPostcode","input","postcode","CheckPostcode","handleBack","console","log","get","then","postcodeValid","data","result","length","longitude","latitude","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","d","miles","roundedMiles","toFixed","deg","PI","distance","homeLatitude","homeLongitude","inputStage","entering","render","renderPostcode","e","target","value"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport axios from \"axios\"\n\nclass Postcode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      postcode: \"\",\n      longitude: null,\n      latitude: null,\n      homeLongitude: -4.175721,\n      homeLatitude: 55.828962,\n      distance: \"\",\n      postcodeResult: null,\n      inputStage: \"2\",\n      leaving: false,\n      entering: false,\n      error: null,\n    }\n  }\n\n  advanceUser = () => {\n    // if (this.state.postcodeResult && this.state.error == null) {\n    //   this.props.setInputStage(\"2\")\n    // } else {\n    //   this.setState({\n    //     error: \"Please enter a valid postcode\",\n    //   })\n    // }\n\n    if (this.state.postcodeResult && this.state.error == null) {\n      this.setState({ leaving: true })\n      let delay = setInterval(() => {\n        this.setState({ leaving: false })\n        this.props.setInputStage(\"1\")\n        clearInterval(delay)\n      }, 500)\n    } else {\n      this.setState({\n        error: \"Please enter a valid postcode\",\n      })\n    }\n  }\n\n  setPostcode = (input) => {\n    this.setState({ postcode: input })\n    this.props.setPostcode(input)\n    this.CheckPostcode(input)\n  }\n\n  handleBack = () => {\n    this.props.setInputStage(\"0\")\n  }\n\n  CheckPostcode = (input) => {\n    console.log(input)\n    if (input == null) {\n      this.setState({\n        error: \"Enter something!\",\n      })\n    } else {\n      axios\n        .get(\"http://api.postcodes.io/postcodes/\" + input + \"/validate\")\n        .then((postcodeValid) => {\n          this.setState({ postcodeResult: postcodeValid.data.result })\n          if (!this.state.postcodeResult && input.length >= 5) {\n            this.setState({ error: \"You have entered an invalid postcode\" })\n          } else {\n            this.setState({ error: null })\n          }\n          axios\n            .get(\"http://api.postcodes.io/postcodes/\" + input)\n            .then((postcode) => {\n              this.setState({\n                longitude: postcode.data.result.longitude,\n                latitude: postcode.data.result.latitude,\n              })\n\n              // POSTCODE DISTANCE CALCULATOR, DO NOT TOUCH OR I WON'T BE HAPPY :)\n\n              function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n                var R = 6371 // Radius of the earth in km\n                var dLat = deg2rad(lat2 - lat1) // deg2rad below\n                var dLon = deg2rad(lon2 - lon1)\n                var a =\n                  Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                  Math.cos(deg2rad(lat1)) *\n                    Math.cos(deg2rad(lat2)) *\n                    Math.sin(dLon / 2) *\n                    Math.sin(dLon / 2)\n                var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n                var d = R * c // Distance in km\n                var miles = d * 0.621371 // Distance in miles\n                var roundedMiles = miles.toFixed(2)\n                return roundedMiles\n              }\n\n              function deg2rad(deg) {\n                return deg * (Math.PI / 180)\n              }\n\n              this.setState({\n                distance: getDistanceFromLatLonInKm(\n                  this.state.homeLatitude,\n                  this.state.homeLongitude,\n                  this.state.latitude,\n                  this.state.longitude\n                ),\n              })\n\n              if (this.state.postcodeResult) {\n                // this.props.setInputStage(\"2\")\n\n                if (this.state.distance < 10) {\n                  this.setState({\n                    error: null,\n                  })\n                } else {\n                  this.setState({\n                    error:\n                      \"You have entered a postcode that is more than 10 miles away, we cannot service you. That postcode is \" +\n                      this.state.distance +\n                      \" miles away.\",\n                  })\n                }\n              } else {\n              }\n            })\n        })\n    }\n  }\n\n  render() {\n    function renderPostcode() {\n      return <h1>test</h1>\n    }\n    return (\n      <div class=\"input-container\">\n        <div class=\"advance_button\">\n          <button class=\"btn_advance\" onClick={() => this.advanceUser()}>\n            Next\n          </button>\n        </div>\n\n        <div class=\"back_button\">\n          <button class=\"btn_back\" onClick={() => this.handleBack()}>\n            Back\n          </button>\n        </div>\n        <div\n          className={\n            this.state.leaving ? \"leaving-anim input\" : \"input entering-anim\"\n          }\n        >\n          <form>\n            <div class=\"form_header\">\n              <h5>Enter Your Postcode</h5>\n            </div>\n            <input\n              className={\n                this.state.postcodeResult && !this.state.error\n                  ? \"highlight-green allCaps\"\n                  : this.state.error\n                  ? \"highlight-red allCaps\"\n                  : this.state.error == null\n                  ? \"allCaps\"\n                  : null\n              }\n              type=\"text\"\n              value={this.state.postcode}\n              onChange={(e) => {\n                this.setPostcode(e.target.value)\n              }}\n            />\n\n            <div class=\"error_msg\">\n              <h5>{this.state.error}</h5>\n            </div>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Postcode\n"]},"metadata":{},"sourceType":"module"}