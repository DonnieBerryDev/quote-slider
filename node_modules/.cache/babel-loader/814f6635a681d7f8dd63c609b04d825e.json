{"ast":null,"code":"var _jsxFileName = \"/Users/donnieberry/Documents/Web Development/Quote Slider/tmd_media_quote_slider/src/components/userInput/Postcode.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Postcode extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setPostcode = input => {\n      this.setState({\n        postcode: input\n      });\n      this.props.setPostcode(input);\n      console.log(this.state.postcode);\n    };\n\n    this.handleBack = () => {\n      this.props.setInputStage(\"0\");\n    };\n\n    this.CheckPostcode = () => {\n      axios.get(\"http://api.postcodes.io/postcodes/\" + this.state.postcode).then(postcode => {\n        this.setState({\n          postcodeResult: postcode.data.result,\n          longitude: postcode.data.result.longitude,\n          latitude: postcode.data.result.latitude\n        }); // POSTCODE DISTANCE CALCULATOR, DO NOT TOUCH OR I WON'T BE HAPPY :)\n\n        function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n          var R = 6371; // Radius of the earth in km\n\n          var dLat = deg2rad(lat2 - lat1); // deg2rad below\n\n          var dLon = deg2rad(lon2 - lon1);\n          var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n          var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n          var d = R * c; // Distance in km\n\n          var miles = d * 0.621371; // Distance in miles\n\n          return miles;\n        }\n\n        function deg2rad(deg) {\n          return deg * (Math.PI / 180);\n        }\n\n        this.setState({\n          distance: getDistanceFromLatLonInKm(this.state.homeLatitude, this.state.homeLongitude, this.state.latitude, this.state.longitude)\n        });\n\n        if (this.state.postcodeResult) {\n          // this.props.setInputStage(\"2\")\n          if (this.state.distance < 10) {\n            alert(\"Less than 10 miles\");\n          } else {\n            alert(\"More than 10 miles\");\n          }\n        }\n      });\n    };\n\n    this.state = {\n      postcode: \"\",\n      longitude: \"\",\n      latitude: \"\",\n      homeLongitude: \"-4.175721\",\n      homeLatitude: \"55.828962\",\n      distance: \"\",\n      postcodeResult: null,\n      inputStage: \"2\",\n      leaving: false\n    };\n  }\n\n  render() {\n    function renderPostcode() {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"advance_button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn_advance\",\n          onClick: () => this.CheckPostcode(),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"back_button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn_back\",\n          onClick: () => this.handleBack(),\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.state.leaving ? \"leaving-anim input\" : \"input entering-anim\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Enter Your Postcode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.postcode,\n            onChange: e => this.setPostcode(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: this.state.error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Postcode;","map":{"version":3,"sources":["/Users/donnieberry/Documents/Web Development/Quote Slider/tmd_media_quote_slider/src/components/userInput/Postcode.js"],"names":["React","axios","Postcode","Component","constructor","props","setPostcode","input","setState","postcode","console","log","state","handleBack","setInputStage","CheckPostcode","get","then","postcodeResult","data","result","longitude","latitude","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","d","miles","deg","PI","distance","homeLatitude","homeLongitude","alert","inputStage","leaving","render","renderPostcode","e","target","value","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAenBC,WAfmB,GAeJC,KAAD,IAAW;AACvB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAEF;AAAZ,OAAd;AACA,WAAKF,KAAL,CAAWC,WAAX,CAAuBC,KAAvB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWH,QAAvB;AACD,KAnBkB;;AAAA,SAqBnBI,UArBmB,GAqBN,MAAM;AACjB,WAAKR,KAAL,CAAWS,aAAX,CAAyB,GAAzB;AACD,KAvBkB;;AAAA,SAyBnBC,aAzBmB,GAyBH,MAAM;AACpBd,MAAAA,KAAK,CACFe,GADH,CACO,uCAAuC,KAAKJ,KAAL,CAAWH,QADzD,EAEGQ,IAFH,CAESR,QAAD,IAAc;AAClB,aAAKD,QAAL,CAAc;AACZU,UAAAA,cAAc,EAAET,QAAQ,CAACU,IAAT,CAAcC,MADlB;AAEZC,UAAAA,SAAS,EAAEZ,QAAQ,CAACU,IAAT,CAAcC,MAAd,CAAqBC,SAFpB;AAGZC,UAAAA,QAAQ,EAAEb,QAAQ,CAACU,IAAT,CAAcC,MAAd,CAAqBE;AAHnB,SAAd,EADkB,CAOlB;;AAEA,iBAASC,yBAAT,CAAmCC,IAAnC,EAAyCC,IAAzC,EAA+CC,IAA/C,EAAqDC,IAArD,EAA2D;AACzD,cAAIC,CAAC,GAAG,IAAR,CADyD,CAC5C;;AACb,cAAIC,IAAI,GAAGC,OAAO,CAACJ,IAAI,GAAGF,IAAR,CAAlB,CAFyD,CAEzB;;AAChC,cAAIO,IAAI,GAAGD,OAAO,CAACH,IAAI,GAAGF,IAAR,CAAlB;AACA,cAAIO,CAAC,GACHC,IAAI,CAACC,GAAL,CAASL,IAAI,GAAG,CAAhB,IAAqBI,IAAI,CAACC,GAAL,CAASL,IAAI,GAAG,CAAhB,CAArB,GACAI,IAAI,CAACE,GAAL,CAASL,OAAO,CAACN,IAAD,CAAhB,IACES,IAAI,CAACE,GAAL,CAASL,OAAO,CAACJ,IAAD,CAAhB,CADF,GAEEO,IAAI,CAACC,GAAL,CAASH,IAAI,GAAG,CAAhB,CAFF,GAGEE,IAAI,CAACC,GAAL,CAASH,IAAI,GAAG,CAAhB,CALJ;AAMA,cAAIK,CAAC,GAAG,IAAIH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,IAAL,CAAUN,CAAV,CAAX,EAAyBC,IAAI,CAACK,IAAL,CAAU,IAAIN,CAAd,CAAzB,CAAZ;AACA,cAAIO,CAAC,GAAGX,CAAC,GAAGQ,CAAZ,CAXyD,CAW3C;;AACd,cAAII,KAAK,GAAGD,CAAC,GAAG,QAAhB,CAZyD,CAYhC;;AACzB,iBAAOC,KAAP;AACD;;AAED,iBAASV,OAAT,CAAiBW,GAAjB,EAAsB;AACpB,iBAAOA,GAAG,IAAIR,IAAI,CAACS,EAAL,GAAU,GAAd,CAAV;AACD;;AAED,aAAKlC,QAAL,CAAc;AACZmC,UAAAA,QAAQ,EAAEpB,yBAAyB,CACjC,KAAKX,KAAL,CAAWgC,YADsB,EAEjC,KAAKhC,KAAL,CAAWiC,aAFsB,EAGjC,KAAKjC,KAAL,CAAWU,QAHsB,EAIjC,KAAKV,KAAL,CAAWS,SAJsB;AADvB,SAAd;;AASA,YAAI,KAAKT,KAAL,CAAWM,cAAf,EAA+B;AAC7B;AACA,cAAI,KAAKN,KAAL,CAAW+B,QAAX,GAAsB,EAA1B,EAA8B;AAC5BG,YAAAA,KAAK,CAAC,oBAAD,CAAL;AACD,WAFD,MAEO;AACLA,YAAAA,KAAK,CAAC,oBAAD,CAAL;AACD;AACF;AACF,OAhDH;AAiDD,KA3EkB;;AAEjB,SAAKlC,KAAL,GAAa;AACXH,MAAAA,QAAQ,EAAE,EADC;AAEXY,MAAAA,SAAS,EAAE,EAFA;AAGXC,MAAAA,QAAQ,EAAE,EAHC;AAIXuB,MAAAA,aAAa,EAAE,WAJJ;AAKXD,MAAAA,YAAY,EAAE,WALH;AAMXD,MAAAA,QAAQ,EAAE,EANC;AAOXzB,MAAAA,cAAc,EAAE,IAPL;AAQX6B,MAAAA,UAAU,EAAE,GARD;AASXC,MAAAA,OAAO,EAAE;AATE,KAAb;AAWD;;AAgEDC,EAAAA,MAAM,GAAG;AACP,aAASC,cAAT,GAA0B;AACxB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AACD,wBACE;AAAK,MAAA,KAAK,EAAC,iBAAX;AAAA,8BACE;AAAK,QAAA,KAAK,EAAC,gBAAX;AAAA,+BACE;AAAQ,UAAA,KAAK,EAAC,aAAd;AAA4B,UAAA,OAAO,EAAE,MAAM,KAAKnC,aAAL,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAK,QAAA,KAAK,EAAC,aAAX;AAAA,+BACE;AAAQ,UAAA,KAAK,EAAC,UAAd;AAAyB,UAAA,OAAO,EAAE,MAAM,KAAKF,UAAL,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eAYE;AACE,QAAA,SAAS,EACP,KAAKD,KAAL,CAAWoC,OAAX,GAAqB,oBAArB,GAA4C,qBAFhD;AAAA,+BAKE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,KAAK,EAAE,KAAKpC,KAAL,CAAWH,QAFpB;AAGE,YAAA,QAAQ,EAAG0C,CAAD,IAAO,KAAK7C,WAAL,CAAiB6C,CAAC,CAACC,MAAF,CAASC,KAA1B;AAHnB;AAAA;AAAA;AAAA;AAAA,kBAFF,eAQE;AAAA,sBAAK,KAAKzC,KAAL,CAAW0C;AAAhB;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA+BD;;AAjHoC;;AAoHvC,eAAepD,QAAf","sourcesContent":["import React from \"react\"\nimport axios from \"axios\"\n\nclass Postcode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      postcode: \"\",\n      longitude: \"\",\n      latitude: \"\",\n      homeLongitude: \"-4.175721\",\n      homeLatitude: \"55.828962\",\n      distance: \"\",\n      postcodeResult: null,\n      inputStage: \"2\",\n      leaving: false,\n    }\n  }\n\n  setPostcode = (input) => {\n    this.setState({ postcode: input })\n    this.props.setPostcode(input)\n    console.log(this.state.postcode)\n  }\n\n  handleBack = () => {\n    this.props.setInputStage(\"0\")\n  }\n\n  CheckPostcode = () => {\n    axios\n      .get(\"http://api.postcodes.io/postcodes/\" + this.state.postcode)\n      .then((postcode) => {\n        this.setState({\n          postcodeResult: postcode.data.result,\n          longitude: postcode.data.result.longitude,\n          latitude: postcode.data.result.latitude,\n        })\n\n        // POSTCODE DISTANCE CALCULATOR, DO NOT TOUCH OR I WON'T BE HAPPY :)\n\n        function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n          var R = 6371 // Radius of the earth in km\n          var dLat = deg2rad(lat2 - lat1) // deg2rad below\n          var dLon = deg2rad(lon2 - lon1)\n          var a =\n            Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(deg2rad(lat1)) *\n              Math.cos(deg2rad(lat2)) *\n              Math.sin(dLon / 2) *\n              Math.sin(dLon / 2)\n          var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n          var d = R * c // Distance in km\n          var miles = d * 0.621371 // Distance in miles\n          return miles\n        }\n\n        function deg2rad(deg) {\n          return deg * (Math.PI / 180)\n        }\n\n        this.setState({\n          distance: getDistanceFromLatLonInKm(\n            this.state.homeLatitude,\n            this.state.homeLongitude,\n            this.state.latitude,\n            this.state.longitude\n          ),\n        })\n\n        if (this.state.postcodeResult) {\n          // this.props.setInputStage(\"2\")\n          if (this.state.distance < 10) {\n            alert(\"Less than 10 miles\")\n          } else {\n            alert(\"More than 10 miles\")\n          }\n        }\n      })\n  }\n\n  render() {\n    function renderPostcode() {\n      return <h1>test</h1>\n    }\n    return (\n      <div class=\"input-container\">\n        <div class=\"advance_button\">\n          <button class=\"btn_advance\" onClick={() => this.CheckPostcode()}>\n            Next\n          </button>\n        </div>\n\n        <div class=\"back_button\">\n          <button class=\"btn_back\" onClick={() => this.handleBack()}>\n            Back\n          </button>\n        </div>\n        <div\n          className={\n            this.state.leaving ? \"leaving-anim input\" : \"input entering-anim\"\n          }\n        >\n          <form>\n            <h5>Enter Your Postcode</h5>\n            <input\n              type=\"text\"\n              value={this.state.postcode}\n              onChange={(e) => this.setPostcode(e.target.value)}\n            />\n\n            <h5>{this.state.error}</h5>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Postcode\n"]},"metadata":{},"sourceType":"module"}