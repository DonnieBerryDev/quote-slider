{"ast":null,"code":"var _jsxFileName = \"/Users/donnieberry/Documents/Web Development/Quote Slider/tmd_media_quote_slider/src/components/userInput/Postcode.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Postcode extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setPostcode = input => {\n      this.setState({\n        postcode: input\n      });\n      this.props.setPostcode(input);\n      console.log(this.state.postcode);\n    };\n\n    this.handleBack = () => {\n      this.props.setInputStage(\"0\");\n    };\n\n    this.CheckPostcode = () => {\n      axios.get(\"http://api.postcodes.io/postcodes/\" + this.state.postcode + \"/validate\").then(postcodeValid => {\n        this.setState({\n          postcodeResult: postcodeValid.data.result\n        });\n        axios.get(\"http://api.postcodes.io/postcodes/\" + this.state.postcode).then(postcode => {\n          this.setState({\n            longitude: postcode.data.result.longitude,\n            latitude: postcode.data.result.latitude\n          });\n          console.log(postcode.data); // POSTCODE DISTANCE CALCULATOR, DO NOT TOUCH OR I WON'T BE HAPPY :)\n\n          function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n            var R = 6371; // Radius of the earth in km\n\n            var dLat = deg2rad(lat2 - lat1); // deg2rad below\n\n            var dLon = deg2rad(lon2 - lon1);\n            var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n            var d = R * c; // Distance in km\n\n            var miles = d * 0.621371; // Distance in miles\n\n            var roundedMiles = miles.toFixed(2);\n            return roundedMiles;\n          }\n\n          function deg2rad(deg) {\n            return deg * (Math.PI / 180);\n          }\n\n          this.setState({\n            distance: getDistanceFromLatLonInKm(this.state.homeLatitude, this.state.homeLongitude, this.state.latitude, this.state.longitude)\n          });\n\n          if (this.state.postcodeResult == 200) {\n            // this.props.setInputStage(\"2\")\n            if (this.state.distance < 10) {\n              this.setState({\n                error: null\n              });\n            } else {\n              this.setState({\n                error: \"You have entered a postcode that is more than 10 miles away, we cannot service you. That postcode is \" + this.state.distance + \" miles away.\"\n              });\n            }\n          } else {\n            this.setState({\n              error: \"You have entered an invalid postcode\"\n            });\n          }\n        });\n      });\n    };\n\n    this.state = {\n      postcode: \"\",\n      longitude: null,\n      latitude: null,\n      homeLongitude: -4.175721,\n      homeLatitude: 55.828962,\n      distance: \"\",\n      postcodeResult: null,\n      inputStage: \"2\",\n      leaving: false,\n      error: null\n    };\n  }\n\n  render() {\n    function renderPostcode() {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"advance_button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn_advance\",\n          onClick: () => this.CheckPostcode(),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"back_button\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn_back\",\n          onClick: () => this.handleBack(),\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.state.leaving ? \"leaving-anim input\" : \"input entering-anim\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Enter Your Postcode\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.postcode,\n            onChange: e => this.setPostcode(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: this.state.error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Postcode;","map":{"version":3,"sources":["/Users/donnieberry/Documents/Web Development/Quote Slider/tmd_media_quote_slider/src/components/userInput/Postcode.js"],"names":["React","axios","Postcode","Component","constructor","props","setPostcode","input","setState","postcode","console","log","state","handleBack","setInputStage","CheckPostcode","get","then","postcodeValid","postcodeResult","data","result","longitude","latitude","getDistanceFromLatLonInKm","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","d","miles","roundedMiles","toFixed","deg","PI","distance","homeLatitude","homeLongitude","error","inputStage","leaving","render","renderPostcode","e","target","value"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport axios from \"axios\"\n\nclass Postcode extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      postcode: \"\",\n      longitude: null,\n      latitude: null,\n      homeLongitude: -4.175721,\n      homeLatitude: 55.828962,\n      distance: \"\",\n      postcodeResult: null,\n      inputStage: \"2\",\n      leaving: false,\n      error: null,\n    }\n  }\n\n  setPostcode = (input) => {\n    this.setState({ postcode: input })\n    this.props.setPostcode(input)\n    console.log(this.state.postcode)\n  }\n\n  handleBack = () => {\n    this.props.setInputStage(\"0\")\n  }\n\n  CheckPostcode = () => {\n    axios\n      .get(\n        \"http://api.postcodes.io/postcodes/\" + this.state.postcode + \"/validate\"\n      )\n      .then((postcodeValid) => {\n        this.setState({ postcodeResult: postcodeValid.data.result })\n\n        axios\n          .get(\"http://api.postcodes.io/postcodes/\" + this.state.postcode)\n          .then((postcode) => {\n            this.setState({\n              longitude: postcode.data.result.longitude,\n              latitude: postcode.data.result.latitude,\n            })\n            console.log(postcode.data)\n\n            // POSTCODE DISTANCE CALCULATOR, DO NOT TOUCH OR I WON'T BE HAPPY :)\n\n            function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n              var R = 6371 // Radius of the earth in km\n              var dLat = deg2rad(lat2 - lat1) // deg2rad below\n              var dLon = deg2rad(lon2 - lon1)\n              var a =\n                Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n                Math.cos(deg2rad(lat1)) *\n                  Math.cos(deg2rad(lat2)) *\n                  Math.sin(dLon / 2) *\n                  Math.sin(dLon / 2)\n              var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n              var d = R * c // Distance in km\n              var miles = d * 0.621371 // Distance in miles\n              var roundedMiles = miles.toFixed(2)\n              return roundedMiles\n            }\n\n            function deg2rad(deg) {\n              return deg * (Math.PI / 180)\n            }\n\n            this.setState({\n              distance: getDistanceFromLatLonInKm(\n                this.state.homeLatitude,\n                this.state.homeLongitude,\n                this.state.latitude,\n                this.state.longitude\n              ),\n            })\n\n            if (this.state.postcodeResult == 200) {\n              // this.props.setInputStage(\"2\")\n\n              if (this.state.distance < 10) {\n                this.setState({\n                  error: null,\n                })\n              } else {\n                this.setState({\n                  error:\n                    \"You have entered a postcode that is more than 10 miles away, we cannot service you. That postcode is \" +\n                    this.state.distance +\n                    \" miles away.\",\n                })\n              }\n            } else {\n              this.setState({\n                error: \"You have entered an invalid postcode\",\n              })\n            }\n          })\n      })\n  }\n\n  render() {\n    function renderPostcode() {\n      return <h1>test</h1>\n    }\n    return (\n      <div class=\"input-container\">\n        <div class=\"advance_button\">\n          <button class=\"btn_advance\" onClick={() => this.CheckPostcode()}>\n            Next\n          </button>\n        </div>\n\n        <div class=\"back_button\">\n          <button class=\"btn_back\" onClick={() => this.handleBack()}>\n            Back\n          </button>\n        </div>\n        <div\n          className={\n            this.state.leaving ? \"leaving-anim input\" : \"input entering-anim\"\n          }\n        >\n          <form>\n            <h5>Enter Your Postcode</h5>\n            <input\n              type=\"text\"\n              value={this.state.postcode}\n              onChange={(e) => this.setPostcode(e.target.value)}\n            />\n\n            <h5>{this.state.error}</h5>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Postcode\n"]},"metadata":{},"sourceType":"module"}